todo

make sure that all the variables are added to .proj as uppercase, and check that no files downstream in process rely on lowercase vars set in get_variables.

change and check variables in template_files.sh exist 

when external project settings file either custom or default is used that no variables are unset.

remove set -a etc from get_variables and make sure that all files that need vars source .proj

change all container run scripts to only source their variables from the local settings file, and perhaps the super_settings file.





# dockerfile_app_names=""
# if [[ ${DEBUG} == "TRUE" ]]
# then
#     echo -e 'mount app source code directories? - note that repository name must be indentical to the contained app name.'
#     select yn in "Yes" "No"; do
#         case $yn in
#             Yes ) MOUNT_SRC_CODE="TRUE"; break;;
#             No ) MOUNT_SRC_CODE="FALSE"; break;;
#         esac
#     done
#     if [[ ${MOUNT_SRC_CODE} == "TRUE" ]]
#     then
#         cd /
#         until [[ -d "${SRC_CODE_PATH}" && ! -L "${SRC_CODE_PATH}" ]] 
#         do
#             echo -e 'mount source code directories (1) or mount git directories (2)'
#             select sg in "src" "git"; do
#                 case $sg in
#                     src ) MOUNT_GIT="FALSE"; break;;
#                     git ) MOUNT_GIT="TRUE"; break;;
#                 esac
#             done
#             if [[ ${MOUNT_GIT} == "TRUE" ]]
#             then
#                 SMSG='Symlinks will be to the git repository which can allow you to use git submodules to track your code changes.'
#             else
#                 SMSG='Symlinks will be to the source code directories inside the git repository.  You will have to manually track source code changes, updating each git in each repository.'
#             fi
#             echo -e 'Absolute path to git repository (the folder where your app directories reside) - *IMPORTANT* There must only be git repository directories at this path, ie each subdirectory of this path must be of the form "app_name" which must be a git repository for your app, and must have the subdirectory "app_name" containing the django_source_code.'
#             echo -e ${SMSG}
#             read -p ":" -e SRC_CODE_PATH
#             if [[ ! -d "${SRC_CODE_PATH}" ]]
#             then
#                echo -e "That path doesn't exist!"
#             fi
#             if [[ -L "${SRC_CODE_PATH}" ]]
#             then
#                 echo -e "Code path must not be a symbolic link"
#             fi
#         done
#         # constructs a dockerfile RUN command that makes the various directories for the source code
#         dockerfile_app_names="RUN "
#         for app_name in $(ls ${SRC_CODE_PATH});
#         do 
#             dockerfile_app_names="${dockerfile_app_names}mkdir -p /opt/${PROJECT_NAME}/${app_name}; "
#         done
#     fi
# fi
